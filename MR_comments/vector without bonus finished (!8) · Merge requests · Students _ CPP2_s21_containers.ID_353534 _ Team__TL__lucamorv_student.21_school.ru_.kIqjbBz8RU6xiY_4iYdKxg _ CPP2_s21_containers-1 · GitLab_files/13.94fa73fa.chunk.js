(this.webpackJsonp=this.webpackJsonp||[]).push([[13],{"+EIG":function(e,i,n){var a={kind:"Document",definitions:[{kind:"FragmentDefinition",name:{kind:"Name",value:"EscalationStatusFragment"},typeCondition:{kind:"NamedType",name:{kind:"Name",value:"Issue"}},directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"escalationStatus"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"escalationPolicy"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"EscalationPolicyFragment"},directives:[]}]}}]}}],loc:{start:0,end:176}};a.loc.source={body:'#import "./escalation_policy.fragment.graphql"\n\nfragment EscalationStatusFragment on Issue {\n  id\n  escalationStatus\n  escalationPolicy {\n    ...EscalationPolicyFragment\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("vBMq").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.EscalationStatusFragment=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"EscalationStatusFragment")},"/3A2":function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"updateIssueConfidential"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"IssueSetConfidentialInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuableSetConfidential"},name:{kind:"Name",value:"issueSetConfidential"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"confidential"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:209}};n.loc.source={body:"mutation updateIssueConfidential($input: IssueSetConfidentialInput!) {\n  issuableSetConfidential: issueSetConfidential(input: $input) {\n    issuable: issue {\n      id\n      confidential\n    }\n    errors\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.updateIssueConfidential=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"updateIssueConfidential")},"0ddK":function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"epicDueDate"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"group"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"dueDate"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"dueDateIsFixed"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"dueDateFixed"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"dueDateFromMilestones"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:230}};n.loc.source={body:"query epicDueDate($fullPath: ID!, $iid: ID) {\n  workspace: group(fullPath: $fullPath) {\n    id\n    issuable: epic(iid: $iid) {\n      id\n      dueDate\n      dueDateIsFixed\n      dueDateFixed\n      dueDateFromMilestones\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.epicDueDate=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"epicDueDate")},"0z+q":function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"epicStartDate"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"group"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"startDate"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"startDateIsFixed"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"startDateFixed"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"startDateFromMilestones"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:240}};n.loc.source={body:"query epicStartDate($fullPath: ID!, $iid: ID) {\n  workspace: group(fullPath: $fullPath) {\n    id\n    issuable: epic(iid: $iid) {\n      id\n      startDate\n      startDateIsFixed\n      startDateFixed\n      startDateFromMilestones\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.epicStartDate=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"epicStartDate")},"1XfR":function(e,i,n){var a={kind:"Document",definitions:[{kind:"FragmentDefinition",name:{kind:"Name",value:"AlertNote"},typeCondition:{kind:"NamedType",name:{kind:"Name",value:"Note"}},directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"author"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"state"},arguments:[],directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"Author"},directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"body"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"bodyHtml"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"createdAt"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"discussion"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"systemNoteIconName"},arguments:[],directives:[]}]}}],loc:{start:0,end:196}};a.loc.source={body:'#import "./author.fragment.graphql"\n\nfragment AlertNote on Note {\n  id\n  author {\n    id\n    state\n    ...Author\n  }\n  body\n  bodyHtml\n  createdAt\n  discussion {\n    id\n  }\n  systemNoteIconName\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("TgHV").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.AlertNote=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"AlertNote")},"1e8H":function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"mergeRequestSetLabels"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"MergeRequestSetLabelsInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"updateIssuableLabels"},name:{kind:"Name",value:"mergeRequestSetLabels"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"labels"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"color"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"description"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:310}};n.loc.source={body:"mutation mergeRequestSetLabels($input: MergeRequestSetLabelsInput!) {\n  updateIssuableLabels: mergeRequestSetLabels(input: $input) {\n    errors\n    issuable: mergeRequest {\n      id\n      labels {\n        nodes {\n          color\n          description\n          id\n          title\n        }\n      }\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.mergeRequestSetLabels=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"mergeRequestSetLabels")},"2x97":function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"updateIssuableConfidential"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"UpdateEpicInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuableSetConfidential"},name:{kind:"Name",value:"updateEpic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"confidential"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:191}};n.loc.source={body:"mutation updateIssuableConfidential($input: UpdateEpicInput!) {\n  issuableSetConfidential: updateEpic(input: $input) {\n    issuable: epic {\n      id\n      confidential\n    }\n    errors\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.updateIssuableConfidential=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"updateIssuableConfidential")},"4uVt":function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"issuableTodoMarkDone"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"TodoMarkDoneInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"todoMutation"},name:{kind:"Name",value:"todoMarkDone"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"todo"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:149}};n.loc.source={body:"mutation issuableTodoMarkDone($input: TodoMarkDoneInput!) {\n  todoMutation: todoMarkDone(input: $input) {\n    todo {\n      id\n    }\n    errors\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.issuableTodoMarkDone=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"issuableTodoMarkDone")},"5eOv":function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"updateTestCaseLabels"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"UpdateIssueInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"updateIssuableLabels"},name:{kind:"Name",value:"updateIssue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"updatedAt"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"updatedBy"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"Author"},directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"labels"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"Label"},directives:[]}]}}]}}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:416}};a.loc.source={body:'#import "~/graphql_shared/fragments/author.fragment.graphql"\n#import "~/graphql_shared/fragments/label.fragment.graphql"\n\nmutation updateTestCaseLabels($input: UpdateIssueInput!) {\n  updateIssuableLabels: updateIssue(input: $input) {\n    issuable: issue {\n      id\n      updatedAt\n      updatedBy {\n        ...Author\n      }\n      labels {\n        nodes {\n          ...Label\n        }\n      }\n    }\n    errors\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};function d(e){return e.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)}))}a.definitions=a.definitions.concat(d(n("TgHV").definitions)),a.definitions=a.definitions.concat(d(n("NwwH").definitions));var r={};function l(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),r[e.name.value]=i}})),e.exports=a,e.exports.updateTestCaseLabels=function(e,i){var n={kind:e.kind,definitions:[l(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=r[i]||new Set,t=new Set,d=new Set;for(a.forEach((function(e){d.add(e)}));d.size>0;){var s=d;d=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(r[e]||new Set).forEach((function(e){d.add(e)})))}))}return t.forEach((function(i){var a=l(e,i);a&&n.definitions.push(a)})),n}(a,"updateTestCaseLabels")},"5ee2":function(e,i,n){"use strict";n.d(i,"t",(function(){return fi})),n.d(i,"w",(function(){return vi})),n.d(i,"p",(function(){return ki})),n.d(i,"B",(function(){return pi})),n.d(i,"L",(function(){return Si})),n.d(i,"q",(function(){return Ni})),n.d(i,"C",(function(){return gi})),n.d(i,"M",(function(){return bi})),n.d(i,"A",(function(){return hi})),n.d(i,"s",(function(){return yi})),n.d(i,"r",(function(){return Di})),n.d(i,"F",(function(){return Ei})),n.d(i,"o",(function(){return Fi})),n.d(i,"H",(function(){return wi})),n.d(i,"v",(function(){return Ti})),n.d(i,"D",(function(){return Vi})),n.d(i,"I",(function(){return Pi})),n.d(i,"f",(function(){return Ai})),n.d(i,"g",(function(){return Oi})),n.d(i,"e",(function(){return $i})),n.d(i,"z",(function(){return ji})),n.d(i,"K",(function(){return Mi})),n.d(i,"n",(function(){return Ri})),n.d(i,"J",(function(){return xi})),n.d(i,"u",(function(){return Li})),n.d(i,"y",(function(){return Ui})),n.d(i,"x",(function(){return _i})),n.d(i,"a",(function(){return Gi})),n.d(i,"E",(function(){return Ci})),n.d(i,"G",(function(){return Qi})),n.d(i,"c",(function(){return zi})),n.d(i,"d",(function(){return Hi})),n.d(i,"h",(function(){return Xi})),n.d(i,"i",(function(){return Bi})),n.d(i,"m",(function(){return Yi})),n.d(i,"j",(function(){return Wi})),n.d(i,"l",(function(){return Ji})),n.d(i,"k",(function(){return nn})),n.d(i,"b",(function(){return an}));var a=n("qDmM"),t=n.n(a),d=n("t9l/"),r=n("il++"),l=n.n(r),s=n("ayGe"),o=n.n(s),u=n("7WD8"),c=n.n(u),m=n("mpzd"),f=n("nQ35"),v=n.n(f),k=n("5eOv"),p=n.n(k),S=n("TsAA"),N=n.n(S),g=n("6Xlf"),b=n.n(g),h=n("E3mz"),y=n.n(h),D=n("uYUK"),E=n.n(D),F=n("Xupq"),w=n.n(F),T=n("mfli"),V=n.n(T),P=n("PEAp"),q=n.n(P),I=n("0ddK"),A=n.n(I),O=n("tB5k"),$=n.n(O),j=n("wSUX"),M=n.n(j),R=n("0z+q"),x=n.n(R),L=n("Bml2"),U=n.n(L),_=n("eO/Q"),G=n.n(_),C=n("wMWn"),Q=n.n(C),z=n("MIX8"),H=n.n(z),X=n("GSV/"),B=n.n(X),Y=n("paIi"),W=n.n(Y),J=n("Ngt0"),K=n.n(J),Z=n("AHEt"),ee=n.n(Z),ie=n("bpen"),ne=n.n(ie),ae=n("Dwpb"),te=n.n(ae),de=n("pKR4"),re=n.n(de),le=n("mawF"),se=n.n(le),oe=n("mxyH"),ue=n.n(oe),ce=n("9d0U"),me=n.n(ce),fe=n("EPAg"),ve=n.n(fe),ke=n("4uVt"),pe=n.n(ke),Se=n("2x97"),Ne=n.n(Se),ge=n("sg9S"),be=n.n(ge),he=n("ZMa4"),ye=n.n(he),De=n("358B"),Ee=n.n(De),Fe=n("/3A2"),we=n.n(Fe),Te=n("NM/P"),Ve=n.n(Te),Pe=n("es8a"),qe=n.n(Pe),Ie=n("lUSz"),Ae=n.n(Ie),Oe=n("1e8H"),$e=n.n(Oe),je=n("MHQH"),Me=n.n(je),Re=n("Pn1H"),xe=n.n(Re),Le=n("XY8l"),Ue=n.n(Le),_e=n("g/D7"),Ge=n.n(_e),Ce=n("lNxX"),Qe=n.n(Ce),ze=n("teMy"),He=n.n(ze),Xe=n("8l+S"),Be=n.n(Xe),Ye=n("kwYf"),We=n.n(Ye),Je=n("MSRs"),Ke=n.n(Je),Ze=n("jrrK"),ei=n.n(Ze),ii=n("B8Eg"),ni=n.n(ii),ai=n("rGXj"),ti=n.n(ai),di=n("AMIN"),ri=n.n(di),li=n("y9w6"),si=n.n(li),oi=n("adGk"),ui=n.n(oi),ci=n("iuSE"),mi=n.n(ci);const fi="TITLE_ASC",vi=/^&(?<iid>\d+)$/,ki={[m.h]:{query:Ue.a,subscription:Q.a,mutation:Ke.a},[m.b.MergeRequest]:{query:He.a,mutation:ei.a},[m.b.Alert]:{query:xe.a,mutation:v.a}},pi={[m.h]:{query:Ge.a},[m.b.MergeRequest]:{query:Be.a},[m.g]:{query:$.a},[m.b.Alert]:{query:"",skipQuery:!0}},Si={[m.h]:{query:o.a},[m.b.MergeRequest]:{query:c.a}},Ni={[m.h]:{query:H.a,mutation:we.a},[m.g]:{query:q.a,mutation:Ne.a}},gi={[m.h]:{query:W.a},[m.b.MergeRequest]:{query:re.a},[m.g]:{query:M.a}},bi={[m.i.project]:{query:V.a},[m.i.group]:{query:y.a}},hi={[m.h]:{issuableQuery:E.a,mutation:l.a,mutationName:"updateIssue"},[m.b.MergeRequest]:{issuableQuery:w.a,mutation:$e.a,mutationName:"mergeRequestSetLabels"},[m.g]:{issuableQuery:N.a,mutation:b.a,mutationName:"updateEpic"},[m.b.TestCase]:{issuableQuery:E.a,mutation:p.a,mutationName:"updateTestCaseLabels"}},yi={start:"startDate",due:"dueDate"},Di={[yi.start]:{isDateFixed:"startDateIsFixed",dateFixed:"startDateFixed",dateFromMilestones:"startDateFromMilestones"},[yi.due]:{isDateFixed:"dueDateIsFixed",dateFixed:"dueDateFixed",dateFromMilestones:"dueDateFromMilestones"}},Ei={[m.h]:{query:K.a,mutation:qe.a},[m.g]:{query:U.a,mutation:Ee.a},[m.b.MergeRequest]:{query:se.a,mutation:Me.a}},Fi={editEvent:"click_edit_button",rightSidebarLabel:"right_sidebar"},wi={[m.h]:{query:ee.a},[m.b.MergeRequest]:{query:ue.a}},Ti={[m.h]:{query:B.a,mutation:Ve.a},[m.g]:{query:A.a,mutation:be.a}},Vi={[m.g]:{query:x.a,mutation:ye.a}},Pi={[m.h]:{query:Qe.a},[m.b.MergeRequest]:{query:We.a}},qi={[m.h]:{query:ui.a,mutation:si.a},[m.b.MergeRequest]:{query:te.a,mutation:Ae.a}},Ii={[m.h]:{query:{[m.i.group]:ri.a,[m.i.project]:mi.a}},[m.b.MergeRequest]:{query:{[m.i.group]:ri.a,[m.i.project]:mi.a}}},Ai={Milestone:"milestone"},Oi={Milestone:Object(d.g)("Issuable|milestone")},$i=(t()(Ai),{[Ai.Milestone]:"active"}),ji={[Ai.Milestone]:{current:qi,list:Ii}},Mi={[m.g]:{query:G.a},[m.h]:{query:ne.a},[m.b.MergeRequest]:{query:me.a}},Ri={Create:"create",MarkDone:"mark-done"},xi={[Ri.Create]:ve.a,[Ri.MarkDone]:pe.a};function Li(e,i){return{noAttribute:Object(d.h)(Object(d.g)("DropdownWidget|No %{issuableAttribute}"),{issuableAttribute:e}),assignAttribute:Object(d.h)(Object(d.g)("DropdownWidget|Assign %{issuableAttribute}"),{issuableAttribute:e}),noAttributesFound:Object(d.h)(Object(d.g)("DropdownWidget|No %{issuableAttribute} found"),{issuableAttribute:e}),updateError:Object(d.h)(Object(d.g)("DropdownWidget|Failed to set %{issuableAttribute} on this %{issuableType}. Please try again."),{issuableAttribute:e,issuableType:i}),listFetchError:Object(d.h)(Object(d.g)("DropdownWidget|Failed to fetch the %{issuableAttribute} for this %{issuableType}. Please try again."),{issuableAttribute:e,issuableType:i}),currentFetchError:Object(d.h)(Object(d.g)("DropdownWidget|An error occurred while fetching the assigned %{issuableAttribute} of the selected %{issuableType}."),{issuableAttribute:e,issuableType:i}),noPermissionToView:Object(d.h)(Object(d.g)("DropdownWidget|You don't have permission to view this %{issuableAttribute}."),{issuableAttribute:e}),editConfirmation:Object(d.h)(Object(d.g)("DropdownWidget|You do not have permission to view the currently assigned %{issuableAttribute} and will not be able to choose it again if you reassign it."),{issuableAttribute:e}),editConfirmationCta:Object(d.h)(Object(d.g)("DropdownWidget|Edit %{issuableAttribute}"),{issuableAttribute:e}),editConfirmationCancel:Object(d.g)("DropdownWidget|Cancel")}}const Ui=ni.a,_i=ti.a,Gi=Object(d.a)("How to track time"),Ci=[{text:Object(d.a)("Open"),value:"reopen"},{text:Object(d.a)("Closed"),value:"close"}],Qi=[{text:Object(d.a)("Subscribe"),value:"subscribe"},{text:Object(d.a)("Unsubscribe"),value:"unsubscribe"}],zi={CRITICAL:{value:"CRITICAL",icon:"critical",label:Object(d.g)("IncidentManagement|Critical - S1")},HIGH:{value:"HIGH",icon:"high",label:Object(d.g)("IncidentManagement|High - S2")},MEDIUM:{value:"MEDIUM",icon:"medium",label:Object(d.g)("IncidentManagement|Medium - S3")},LOW:{value:"LOW",icon:"low",label:Object(d.g)("IncidentManagement|Low - S4")},UNKNOWN:{value:"UNKNOWN",icon:"unknown",label:Object(d.g)("IncidentManagement|Unknown")}},Hi={INCIDENT:"incident"},Xi={ACTIVE:"active",CLOSED:"closed"},Bi={UPDATE_SEVERITY_ERROR:Object(d.g)("SeverityWidget|There was an error while updating severity."),TRY_AGAIN:Object(d.a)("Please try again"),EDIT:Object(d.a)("Edit"),SEVERITY:Object(d.g)("SeverityWidget|Severity"),SEVERITY_VALUE:Object(d.g)("SeverityWidget|Severity: %{severity}")},Yi="TRIGGERED",Wi="ACKNOWLEDGED",Ji="RESOLVED",Ki=Object(d.g)("IncidentManagement|Triggered"),Zi=Object(d.g)("IncidentManagement|Acknowledged"),en=Object(d.g)("IncidentManagement|Resolved"),nn={[Yi]:Ki,[Wi]:Zi,[Ji]:en},an={fetchError:Object(d.g)("IncidentManagement|An error occurred while fetching the incident status. Please reload the page."),title:Object(d.g)("IncidentManagement|Status"),updateError:Object(d.g)("IncidentManagement|An error occurred while updating the incident status. Please reload the page and try again.")}},"6Xlf":function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"updateEpicLabels"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"UpdateEpicInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"updateIssuableLabels"},name:{kind:"Name",value:"updateEpic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"labels"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"Label"},directives:[]}]}}]}}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:288}};a.loc.source={body:'#import "~/graphql_shared/fragments/label.fragment.graphql"\n\nmutation updateEpicLabels($input: UpdateEpicInput!) {\n  updateIssuableLabels: updateEpic(input: $input) {\n    issuable: epic {\n      id\n      labels {\n        nodes {\n          ...Label\n        }\n      }\n    }\n    errors\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("NwwH").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.updateEpicLabels=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"updateEpicLabels")},"7WD8":function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"projectUsersSearchWithMRPermissions"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"search"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"mergeRequestId"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"MergeRequestID"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"users"},name:{kind:"Name",value:"projectMembers"},arguments:[{kind:"Argument",name:{kind:"Name",value:"search"},value:{kind:"Variable",name:{kind:"Name",value:"search"}}},{kind:"Argument",name:{kind:"Name",value:"relations"},value:{kind:"ListValue",values:[{kind:"EnumValue",value:"DIRECT"},{kind:"EnumValue",value:"INHERITED"},{kind:"EnumValue",value:"INVITED_GROUPS"}]}},{kind:"Argument",name:{kind:"Name",value:"sort"},value:{kind:"EnumValue",value:"USER_FULL_NAME_ASC"}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"mergeRequestInteraction"},arguments:[{kind:"Argument",name:{kind:"Name",value:"id"},value:{kind:"Variable",name:{kind:"Name",value:"mergeRequestId"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"canMerge"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"user"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"UserAvailability"},directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:630}};a.loc.source={body:'#import "../fragments/user.fragment.graphql"\n#import "~/graphql_shared/fragments/user_availability.fragment.graphql"\n\nquery projectUsersSearchWithMRPermissions(\n  $search: String!\n  $fullPath: ID!\n  $mergeRequestId: MergeRequestID!\n) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    users: projectMembers(\n      search: $search\n      relations: [DIRECT, INHERITED, INVITED_GROUPS]\n      sort: USER_FULL_NAME_ASC\n    ) {\n      nodes {\n        id\n        mergeRequestInteraction(id: $mergeRequestId) {\n          canMerge\n        }\n        user {\n          ...User\n          ...UserAvailability\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};function d(e){return e.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)}))}a.definitions=a.definitions.concat(d(n("yXJ/").definitions)),a.definitions=a.definitions.concat(d(n("ND1Y").definitions));var r={};function l(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),r[e.name.value]=i}})),e.exports=a,e.exports.projectUsersSearchWithMRPermissions=function(e,i){var n={kind:e.kind,definitions:[l(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=r[i]||new Set,t=new Set,d=new Set;for(a.forEach((function(e){d.add(e)}));d.size>0;){var s=d;d=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(r[e]||new Set).forEach((function(e){d.add(e)})))}))}return t.forEach((function(i){var a=l(e,i);a&&n.definitions.push(a)})),n}(a,"projectUsersSearchWithMRPermissions")},"8l+S":function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"getMrParticipants"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"getStatus"}},type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}},defaultValue:{kind:"BooleanValue",value:!1},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"participants"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"UserAvailability"},directives:[{kind:"Directive",name:{kind:"Name",value:"include"},arguments:[{kind:"Argument",name:{kind:"Name",value:"if"},value:{kind:"Variable",name:{kind:"Name",value:"getStatus"}}}]}]}]}}]}}]}}]}}]}}],loc:{start:0,end:458}};a.loc.source={body:'#import "~/graphql_shared/fragments/user.fragment.graphql"\n#import "~/graphql_shared/fragments/user_availability.fragment.graphql"\n\nquery getMrParticipants($fullPath: ID!, $iid: String!, $getStatus: Boolean = false) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: mergeRequest(iid: $iid) {\n      id\n      participants {\n        nodes {\n          ...User\n          ...UserAvailability @include(if: $getStatus)\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};function d(e){return e.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)}))}a.definitions=a.definitions.concat(d(n("yXJ/").definitions)),a.definitions=a.definitions.concat(d(n("ND1Y").definitions));var r={};function l(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),r[e.name.value]=i}})),e.exports=a,e.exports.getMrParticipants=function(e,i){var n={kind:e.kind,definitions:[l(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=r[i]||new Set,t=new Set,d=new Set;for(a.forEach((function(e){d.add(e)}));d.size>0;){var s=d;d=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(r[e]||new Set).forEach((function(e){d.add(e)})))}))}return t.forEach((function(i){var a=l(e,i);a&&n.definitions.push(a)})),n}(a,"getMrParticipants")},"9d0U":function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"mergeRequestTodos"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"currentUserTodos"},arguments:[{kind:"Argument",name:{kind:"Name",value:"state"},value:{kind:"EnumValue",value:"pending"}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:257}};n.loc.source={body:"query mergeRequestTodos($fullPath: ID!, $iid: String!) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: mergeRequest(iid: $iid) {\n      id\n      currentUserTodos(state: pending) {\n        nodes {\n          id\n        }\n      }\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.mergeRequestTodos=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"mergeRequestTodos")},AHEt:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"issueTimeTracking"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"IssueTimeTrackingFragment"},directives:[]},{kind:"Field",name:{kind:"Name",value:"humanTimeEstimate"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"timeEstimate"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:305}};a.loc.source={body:'#import "~/graphql_shared/fragments/issue_time_tracking.fragment.graphql"\n\nquery issueTimeTracking($fullPath: ID!, $iid: String) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: issue(iid: $iid) {\n      ...IssueTimeTrackingFragment\n      humanTimeEstimate\n      timeEstimate\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("RTH5").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.issueTimeTracking=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"issueTimeTracking")},AMIN:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"groupMilestones"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"title"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"state"}},type:{kind:"NamedType",name:{kind:"Name",value:"MilestoneStateEnum"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"group"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"attributes"},name:{kind:"Name",value:"milestones"},arguments:[{kind:"Argument",name:{kind:"Name",value:"searchTitle"},value:{kind:"Variable",name:{kind:"Name",value:"title"}}},{kind:"Argument",name:{kind:"Name",value:"state"},value:{kind:"Variable",name:{kind:"Name",value:"state"}}},{kind:"Argument",name:{kind:"Name",value:"sort"},value:{kind:"EnumValue",value:"EXPIRED_LAST_DUE_DATE_ASC"}},{kind:"Argument",name:{kind:"Name",value:"first"},value:{kind:"IntValue",value:"20"}},{kind:"Argument",name:{kind:"Name",value:"includeAncestors"},value:{kind:"BooleanValue",value:!0}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"MilestoneFragment"},directives:[]},{kind:"Field",name:{kind:"Name",value:"state"},arguments:[],directives:[]}]}}]}}]}}]}}],loc:{start:0,end:415}};a.loc.source={body:'#import "./milestone.fragment.graphql"\n\nquery groupMilestones($fullPath: ID!, $title: String, $state: MilestoneStateEnum) {\n  workspace: group(fullPath: $fullPath) {\n    id\n    attributes: milestones(\n      searchTitle: $title\n      state: $state\n      sort: EXPIRED_LAST_DUE_DATE_ASC\n      first: 20\n      includeAncestors: true\n    ) {\n      nodes {\n        ...MilestoneFragment\n        state\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("ET+c").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.groupMilestones=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"groupMilestones")},B8Eg:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"escalationStatusQuery"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"escalationStatus"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:188}};n.loc.source={body:"query escalationStatusQuery($fullPath: ID!, $iid: String) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: issue(iid: $iid) {\n      id\n      escalationStatus\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.escalationStatusQuery=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"escalationStatusQuery")},Bml2:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"epicSubscribed"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"group"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"emailsDisabled"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"subscribed"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:187}};n.loc.source={body:"query epicSubscribed($fullPath: ID!, $iid: ID) {\n  workspace: group(fullPath: $fullPath) {\n    id\n    emailsDisabled\n    issuable: epic(iid: $iid) {\n      id\n      subscribed\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.epicSubscribed=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"epicSubscribed")},Dwpb:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"mergeRequestMilestone"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"attribute"},name:{kind:"Name",value:"milestone"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"MilestoneFragment"},directives:[]}]}}]}}]}}]}}],loc:{start:0,end:279}};a.loc.source={body:'#import "./milestone.fragment.graphql"\n\nquery mergeRequestMilestone($fullPath: ID!, $iid: String!) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: mergeRequest(iid: $iid) {\n      id\n      attribute: milestone {\n        ...MilestoneFragment\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("ET+c").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.mergeRequestMilestone=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"mergeRequestMilestone")},E3mz:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"groupLabels"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"searchTerm"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"group"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"labels"},arguments:[{kind:"Argument",name:{kind:"Name",value:"searchTerm"},value:{kind:"Variable",name:{kind:"Name",value:"searchTerm"}}},{kind:"Argument",name:{kind:"Name",value:"onlyGroupLabels"},value:{kind:"BooleanValue",value:!0}},{kind:"Argument",name:{kind:"Name",value:"includeAncestorGroups"},value:{kind:"BooleanValue",value:!0}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"Label"},directives:[]}]}}]}}]}}]}}],loc:{start:0,end:308}};a.loc.source={body:'#import "~/graphql_shared/fragments/label.fragment.graphql"\n\nquery groupLabels($fullPath: ID!, $searchTerm: String) {\n  workspace: group(fullPath: $fullPath) {\n    id\n    labels(searchTerm: $searchTerm, onlyGroupLabels: true, includeAncestorGroups: true) {\n      nodes {\n        ...Label\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("NwwH").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.groupLabels=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"groupLabels")},EPAg:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"issuableTodoCreate"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"TodoCreateInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"todoMutation"},name:{kind:"Name",value:"todoCreate"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"todo"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:143}};n.loc.source={body:"mutation issuableTodoCreate($input: TodoCreateInput!) {\n  todoMutation: todoCreate(input: $input) {\n    todo {\n      id\n    }\n    errors\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.issuableTodoCreate=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"issuableTodoCreate")},"ET+c":function(e,i){var n={kind:"Document",definitions:[{kind:"FragmentDefinition",name:{kind:"Name",value:"MilestoneFragment"},typeCondition:{kind:"NamedType",name:{kind:"Name",value:"Milestone"}},directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"webUrl"},name:{kind:"Name",value:"webPath"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"dueDate"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"expired"},arguments:[],directives:[]}]}}],loc:{start:0,end:95}};n.loc.source={body:"fragment MilestoneFragment on Milestone {\n  id\n  title\n  webUrl: webPath\n  dueDate\n  expired\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.MilestoneFragment=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"MilestoneFragment")},"GSV/":function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"issueDueDate"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"dueDate"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:170}};n.loc.source={body:"query issueDueDate($fullPath: ID!, $iid: String) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: issue(iid: $iid) {\n      id\n      dueDate\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.issueDueDate=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"issueDueDate")},J8uK:function(e,i,n){var a={kind:"Document",definitions:[{kind:"FragmentDefinition",name:{kind:"Name",value:"MergeRequestTimeTrackingFragment"},typeCondition:{kind:"NamedType",name:{kind:"Name",value:"MergeRequest"}},directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"humanTotalTimeSpent"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"totalTimeSpent"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"timelogs"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"TimelogFragment"},directives:[]}]}}]}}]}}],loc:{start:0,end:252}};a.loc.source={body:'#import "~/graphql_shared/fragments/issuable_timelogs.fragment.graphql"\n\nfragment MergeRequestTimeTrackingFragment on MergeRequest {\n  __typename\n  id\n  humanTotalTimeSpent\n  totalTimeSpent\n  timelogs {\n    nodes {\n      ...TimelogFragment\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("w9Yc").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.MergeRequestTimeTrackingFragment=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"MergeRequestTimeTrackingFragment")},MHQH:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"mergeRequestSetSubscription"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"subscribedState"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"updateIssuableSubscription"},name:{kind:"Name",value:"mergeRequestSetSubscription"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"projectPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}},{kind:"ObjectField",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}},{kind:"ObjectField",name:{kind:"Name",value:"subscribedState"},value:{kind:"Variable",name:{kind:"Name",value:"subscribedState"}}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"subscribed"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:325}};n.loc.source={body:"mutation mergeRequestSetSubscription($fullPath: ID!, $iid: String!, $subscribedState: Boolean!) {\n  updateIssuableSubscription: mergeRequestSetSubscription(\n    input: { projectPath: $fullPath, iid: $iid, subscribedState: $subscribedState }\n  ) {\n    issuable: mergeRequest {\n      id\n      subscribed\n    }\n    errors\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.mergeRequestSetSubscription=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"mergeRequestSetSubscription")},MIX8:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"issueConfidential"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"confidential"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:180}};n.loc.source={body:"query issueConfidential($fullPath: ID!, $iid: String) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: issue(iid: $iid) {\n      id\n      confidential\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.issueConfidential=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"issueConfidential")},MSRs:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"issueSetAssignees"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assigneeUsernames"}},type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuableSetAssignees"},name:{kind:"Name",value:"issueSetAssignees"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}},{kind:"ObjectField",name:{kind:"Name",value:"assigneeUsernames"},value:{kind:"Variable",name:{kind:"Name",value:"assigneeUsernames"}}},{kind:"ObjectField",name:{kind:"Name",value:"projectPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assignees"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"UserAvailability"},directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:504}};a.loc.source={body:'#import "~/graphql_shared/fragments/user.fragment.graphql"\n#import "~/graphql_shared/fragments/user_availability.fragment.graphql"\n\nmutation issueSetAssignees($iid: String!, $assigneeUsernames: [String!]!, $fullPath: ID!) {\n  issuableSetAssignees: issueSetAssignees(\n    input: { iid: $iid, assigneeUsernames: $assigneeUsernames, projectPath: $fullPath }\n  ) {\n    issuable: issue {\n      id\n      assignees {\n        nodes {\n          ...User\n          ...UserAvailability\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};function d(e){return e.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)}))}a.definitions=a.definitions.concat(d(n("yXJ/").definitions)),a.definitions=a.definitions.concat(d(n("ND1Y").definitions));var r={};function l(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),r[e.name.value]=i}})),e.exports=a,e.exports.issueSetAssignees=function(e,i){var n={kind:e.kind,definitions:[l(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=r[i]||new Set,t=new Set,d=new Set;for(a.forEach((function(e){d.add(e)}));d.size>0;){var s=d;d=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(r[e]||new Set).forEach((function(e){d.add(e)})))}))}return t.forEach((function(i){var a=l(e,i);a&&n.definitions.push(a)})),n}(a,"issueSetAssignees")},"NM/P":function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"updateIssueDueDate"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"UpdateIssueInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuableSetDate"},name:{kind:"Name",value:"updateIssue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"dueDate"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:173}};n.loc.source={body:"mutation updateIssueDueDate($input: UpdateIssueInput!) {\n  issuableSetDate: updateIssue(input: $input) {\n    issuable: issue {\n      id\n      dueDate\n    }\n    errors\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.updateIssueDueDate=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"updateIssueDueDate")},Ngt0:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"issueSubscribed"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"subscribed"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"emailsDisabled"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:197}};n.loc.source={body:"query issueSubscribed($fullPath: ID!, $iid: String) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: issue(iid: $iid) {\n      id\n      subscribed\n      emailsDisabled\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.issueSubscribed=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"issueSubscribed")},PEAp:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"epicConfidential"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"group"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"confidential"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:172}};n.loc.source={body:"query epicConfidential($fullPath: ID!, $iid: ID) {\n  workspace: group(fullPath: $fullPath) {\n    id\n    issuable: epic(iid: $iid) {\n      id\n      confidential\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.epicConfidential=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"epicConfidential")},Pn1H:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"alertAssignees"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"domain"}},type:{kind:"NamedType",name:{kind:"Name",value:"AlertManagementDomainFilter"}},defaultValue:{kind:"EnumValue",value:"threat_monitoring"},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"alertManagementAlert"},arguments:[{kind:"Argument",name:{kind:"Name",value:"domain"},value:{kind:"Variable",name:{kind:"Name",value:"domain"}}},{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"iid"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assignees"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"UserAvailability"},directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:497}};a.loc.source={body:'#import "~/graphql_shared/fragments/user.fragment.graphql"\n#import "~/graphql_shared/fragments/user_availability.fragment.graphql"\n\nquery alertAssignees(\n  $domain: AlertManagementDomainFilter = threat_monitoring\n  $fullPath: ID!\n  $iid: String!\n) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: alertManagementAlert(domain: $domain, iid: $iid) {\n      id\n      iid\n      assignees {\n        nodes {\n          ...User\n          ...UserAvailability\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};function d(e){return e.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)}))}a.definitions=a.definitions.concat(d(n("yXJ/").definitions)),a.definitions=a.definitions.concat(d(n("ND1Y").definitions));var r={};function l(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),r[e.name.value]=i}})),e.exports=a,e.exports.alertAssignees=function(e,i){var n={kind:e.kind,definitions:[l(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=r[i]||new Set,t=new Set,d=new Set;for(a.forEach((function(e){d.add(e)}));d.size>0;){var s=d;d=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(r[e]||new Set).forEach((function(e){d.add(e)})))}))}return t.forEach((function(i){var a=l(e,i);a&&n.definitions.push(a)})),n}(a,"alertAssignees")},RTH5:function(e,i,n){var a={kind:"Document",definitions:[{kind:"FragmentDefinition",name:{kind:"Name",value:"IssueTimeTrackingFragment"},typeCondition:{kind:"NamedType",name:{kind:"Name",value:"Issue"}},directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"humanTotalTimeSpent"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"totalTimeSpent"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"timelogs"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"TimelogFragment"},directives:[]}]}}]}}]}}],loc:{start:0,end:238}};a.loc.source={body:'#import "~/graphql_shared/fragments/issuable_timelogs.fragment.graphql"\n\nfragment IssueTimeTrackingFragment on Issue {\n  __typename\n  id\n  humanTotalTimeSpent\n  totalTimeSpent\n  timelogs {\n    nodes {\n      ...TimelogFragment\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("w9Yc").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.IssueTimeTrackingFragment=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"IssueTimeTrackingFragment")},TsAA:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"epicLabels"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"group"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"labels"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"Label"},directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:276}};a.loc.source={body:'#import "~/graphql_shared/fragments/label.fragment.graphql"\n\nquery epicLabels($fullPath: ID!, $iid: ID) {\n  workspace: group(fullPath: $fullPath) {\n    id\n    issuable: epic(iid: $iid) {\n      id\n      labels {\n        nodes {\n          ...Label\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("NwwH").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.epicLabels=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"epicLabels")},XY8l:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"issueAssignees"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"author"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"UserAvailability"},directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"assignees"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"UserAvailability"},directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:458}};a.loc.source={body:'#import "~/graphql_shared/fragments/user.fragment.graphql"\n#import "~/graphql_shared/fragments/user_availability.fragment.graphql"\n\nquery issueAssignees($fullPath: ID!, $iid: String!) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: issue(iid: $iid) {\n      id\n      author {\n        ...User\n        ...UserAvailability\n      }\n      assignees {\n        nodes {\n          ...User\n          ...UserAvailability\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};function d(e){return e.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)}))}a.definitions=a.definitions.concat(d(n("yXJ/").definitions)),a.definitions=a.definitions.concat(d(n("ND1Y").definitions));var r={};function l(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),r[e.name.value]=i}})),e.exports=a,e.exports.issueAssignees=function(e,i){var n={kind:e.kind,definitions:[l(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=r[i]||new Set,t=new Set,d=new Set;for(a.forEach((function(e){d.add(e)}));d.size>0;){var s=d;d=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(r[e]||new Set).forEach((function(e){d.add(e)})))}))}return t.forEach((function(i){var a=l(e,i);a&&n.definitions.push(a)})),n}(a,"issueAssignees")},Xupq:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"mergeRequestLabels"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"labels"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"Label"},directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:299}};a.loc.source={body:'#import "~/graphql_shared/fragments/label.fragment.graphql"\n\nquery mergeRequestLabels($fullPath: ID!, $iid: String!) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: mergeRequest(iid: $iid) {\n      id\n      labels {\n        nodes {\n          ...Label\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("NwwH").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.mergeRequestLabels=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"mergeRequestLabels")},ZMa4:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"updateEpicStartDate"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"UpdateEpicInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuableSetDate"},name:{kind:"Name",value:"updateEpic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"startDateIsFixed"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"startDateFixed"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"startDateFromMilestones"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:231}};n.loc.source={body:"mutation updateEpicStartDate($input: UpdateEpicInput!) {\n  issuableSetDate: updateEpic(input: $input) {\n    issuable: epic {\n      id\n      startDateIsFixed\n      startDateFixed\n      startDateFromMilestones\n    }\n    errors\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.updateEpicStartDate=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"updateEpicStartDate")},adGk:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"projectIssueMilestone"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"attribute"},name:{kind:"Name",value:"milestone"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"MilestoneFragment"},directives:[]}]}}]}}]}}]}}],loc:{start:0,end:272}};a.loc.source={body:'#import "./milestone.fragment.graphql"\n\nquery projectIssueMilestone($fullPath: ID!, $iid: String!) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: issue(iid: $iid) {\n      id\n      attribute: milestone {\n        ...MilestoneFragment\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("ET+c").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.projectIssueMilestone=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"projectIssueMilestone")},ayGe:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"projectUsersSearch"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"search"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"after"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"first"}},type:{kind:"NamedType",name:{kind:"Name",value:"Int"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"users"},name:{kind:"Name",value:"projectMembers"},arguments:[{kind:"Argument",name:{kind:"Name",value:"search"},value:{kind:"Variable",name:{kind:"Name",value:"search"}}},{kind:"Argument",name:{kind:"Name",value:"relations"},value:{kind:"ListValue",values:[{kind:"EnumValue",value:"DIRECT"},{kind:"EnumValue",value:"INHERITED"},{kind:"EnumValue",value:"INVITED_GROUPS"}]}},{kind:"Argument",name:{kind:"Name",value:"first"},value:{kind:"Variable",name:{kind:"Name",value:"first"}}},{kind:"Argument",name:{kind:"Name",value:"after"},value:{kind:"Variable",name:{kind:"Name",value:"after"}}},{kind:"Argument",name:{kind:"Name",value:"sort"},value:{kind:"EnumValue",value:"USER_FULL_NAME_ASC"}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"pageInfo"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"hasNextPage"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"endCursor"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"startCursor"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"user"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"UserAvailability"},directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:641}};a.loc.source={body:'#import "../fragments/user.fragment.graphql"\n#import "~/graphql_shared/fragments/user_availability.fragment.graphql"\n\nquery projectUsersSearch($search: String!, $fullPath: ID!, $after: String, $first: Int) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    users: projectMembers(\n      search: $search\n      relations: [DIRECT, INHERITED, INVITED_GROUPS]\n      first: $first\n      after: $after\n      sort: USER_FULL_NAME_ASC\n    ) {\n      pageInfo {\n        hasNextPage\n        endCursor\n        startCursor\n      }\n      nodes {\n        id\n        user {\n          ...User\n          ...UserAvailability\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};function d(e){return e.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)}))}a.definitions=a.definitions.concat(d(n("yXJ/").definitions)),a.definitions=a.definitions.concat(d(n("ND1Y").definitions));var r={};function l(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),r[e.name.value]=i}})),e.exports=a,e.exports.projectUsersSearch=function(e,i){var n={kind:e.kind,definitions:[l(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=r[i]||new Set,t=new Set,d=new Set;for(a.forEach((function(e){d.add(e)}));d.size>0;){var s=d;d=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(r[e]||new Set).forEach((function(e){d.add(e)})))}))}return t.forEach((function(i){var a=l(e,i);a&&n.definitions.push(a)})),n}(a,"projectUsersSearch")},bpen:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"issueTodos"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"currentUserTodos"},arguments:[{kind:"Argument",name:{kind:"Name",value:"state"},value:{kind:"EnumValue",value:"pending"}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:243}};n.loc.source={body:"query issueTodos($fullPath: ID!, $iid: String!) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: issue(iid: $iid) {\n      id\n      currentUserTodos(state: pending) {\n        nodes {\n          id\n        }\n      }\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.issueTodos=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"issueTodos")},"eO/Q":function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"epicTodos"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"group"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"currentUserTodos"},arguments:[{kind:"Argument",name:{kind:"Name",value:"state"},value:{kind:"EnumValue",value:"pending"}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:234}};n.loc.source={body:"query epicTodos($fullPath: ID!, $iid: ID) {\n  workspace: group(fullPath: $fullPath) {\n    id\n    issuable: epic(iid: $iid) {\n      id\n      currentUserTodos(state: pending) {\n        nodes {\n          id\n        }\n      }\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.epicTodos=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"epicTodos")},es8a:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"projectIssueSetSubscription"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"subscribedState"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"updateIssuableSubscription"},name:{kind:"Name",value:"issueSetSubscription"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"projectPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}},{kind:"ObjectField",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}},{kind:"ObjectField",name:{kind:"Name",value:"subscribedState"},value:{kind:"Variable",name:{kind:"Name",value:"subscribedState"}}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"subscribed"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:311}};n.loc.source={body:"mutation projectIssueSetSubscription($fullPath: ID!, $iid: String!, $subscribedState: Boolean!) {\n  updateIssuableSubscription: issueSetSubscription(\n    input: { projectPath: $fullPath, iid: $iid, subscribedState: $subscribedState }\n  ) {\n    issuable: issue {\n      id\n      subscribed\n    }\n    errors\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.projectIssueSetSubscription=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"projectIssueSetSubscription")},"g/D7":function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"issueParticipants"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"getStatus"}},type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}},defaultValue:{kind:"BooleanValue",value:!1},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"participants"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"UserAvailability"},directives:[{kind:"Directive",name:{kind:"Name",value:"include"},arguments:[{kind:"Argument",name:{kind:"Name",value:"if"},value:{kind:"Variable",name:{kind:"Name",value:"getStatus"}}}]}]}]}}]}}]}}]}}]}}],loc:{start:0,end:451}};a.loc.source={body:'#import "~/graphql_shared/fragments/user.fragment.graphql"\n#import "~/graphql_shared/fragments/user_availability.fragment.graphql"\n\nquery issueParticipants($fullPath: ID!, $iid: String!, $getStatus: Boolean = false) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: issue(iid: $iid) {\n      id\n      participants {\n        nodes {\n          ...User\n          ...UserAvailability @include(if: $getStatus)\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};function d(e){return e.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)}))}a.definitions=a.definitions.concat(d(n("yXJ/").definitions)),a.definitions=a.definitions.concat(d(n("ND1Y").definitions));var r={};function l(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),r[e.name.value]=i}})),e.exports=a,e.exports.issueParticipants=function(e,i){var n={kind:e.kind,definitions:[l(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=r[i]||new Set,t=new Set,d=new Set;for(a.forEach((function(e){d.add(e)}));d.size>0;){var s=d;d=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(r[e]||new Set).forEach((function(e){d.add(e)})))}))}return t.forEach((function(i){var a=l(e,i);a&&n.definitions.push(a)})),n}(a,"issueParticipants")},"il++":function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"issueSetLabels"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"UpdateIssueInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"updateIssuableLabels"},name:{kind:"Name",value:"updateIssue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"labels"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"Label"},directives:[]}]}}]}}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:289}};a.loc.source={body:'#import "~/graphql_shared/fragments/label.fragment.graphql"\n\nmutation issueSetLabels($input: UpdateIssueInput!) {\n  updateIssuableLabels: updateIssue(input: $input) {\n    issuable: issue {\n      id\n      labels {\n        nodes {\n          ...Label\n        }\n      }\n    }\n    errors\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("NwwH").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.issueSetLabels=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"issueSetLabels")},iuSE:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"projectMilestones"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"title"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"state"}},type:{kind:"NamedType",name:{kind:"Name",value:"MilestoneStateEnum"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"attributes"},name:{kind:"Name",value:"milestones"},arguments:[{kind:"Argument",name:{kind:"Name",value:"searchTitle"},value:{kind:"Variable",name:{kind:"Name",value:"title"}}},{kind:"Argument",name:{kind:"Name",value:"state"},value:{kind:"Variable",name:{kind:"Name",value:"state"}}},{kind:"Argument",name:{kind:"Name",value:"sort"},value:{kind:"EnumValue",value:"EXPIRED_LAST_DUE_DATE_ASC"}},{kind:"Argument",name:{kind:"Name",value:"first"},value:{kind:"IntValue",value:"20"}},{kind:"Argument",name:{kind:"Name",value:"includeAncestors"},value:{kind:"BooleanValue",value:!0}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"MilestoneFragment"},directives:[]},{kind:"Field",name:{kind:"Name",value:"state"},arguments:[],directives:[]}]}}]}}]}}]}}],loc:{start:0,end:419}};a.loc.source={body:'#import "./milestone.fragment.graphql"\n\nquery projectMilestones($fullPath: ID!, $title: String, $state: MilestoneStateEnum) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    attributes: milestones(\n      searchTitle: $title\n      state: $state\n      sort: EXPIRED_LAST_DUE_DATE_ASC\n      first: 20\n      includeAncestors: true\n    ) {\n      nodes {\n        ...MilestoneFragment\n        state\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("ET+c").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.projectMilestones=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"projectMilestones")},jrrK:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"mergeRequestSetAssignees"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assigneeUsernames"}},type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuableSetAssignees"},name:{kind:"Name",value:"mergeRequestSetAssignees"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}},{kind:"ObjectField",name:{kind:"Name",value:"assigneeUsernames"},value:{kind:"Variable",name:{kind:"Name",value:"assigneeUsernames"}}},{kind:"ObjectField",name:{kind:"Name",value:"projectPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assignees"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"UserAvailability"},directives:[]},{kind:"Field",name:{kind:"Name",value:"mergeRequestInteraction"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"canMerge"},arguments:[],directives:[]}]}}]}}]}}]}}]}}]}}],loc:{start:0,end:594}};a.loc.source={body:'#import "~/graphql_shared/fragments/user.fragment.graphql"\n#import "~/graphql_shared/fragments/user_availability.fragment.graphql"\n\nmutation mergeRequestSetAssignees($iid: String!, $assigneeUsernames: [String!]!, $fullPath: ID!) {\n  issuableSetAssignees: mergeRequestSetAssignees(\n    input: { iid: $iid, assigneeUsernames: $assigneeUsernames, projectPath: $fullPath }\n  ) {\n    issuable: mergeRequest {\n      id\n      assignees {\n        nodes {\n          ...User\n          ...UserAvailability\n          mergeRequestInteraction {\n            canMerge\n          }\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};function d(e){return e.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)}))}a.definitions=a.definitions.concat(d(n("yXJ/").definitions)),a.definitions=a.definitions.concat(d(n("ND1Y").definitions));var r={};function l(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),r[e.name.value]=i}})),e.exports=a,e.exports.mergeRequestSetAssignees=function(e,i){var n={kind:e.kind,definitions:[l(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=r[i]||new Set,t=new Set,d=new Set;for(a.forEach((function(e){d.add(e)}));d.size>0;){var s=d;d=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(r[e]||new Set).forEach((function(e){d.add(e)})))}))}return t.forEach((function(i){var a=l(e,i);a&&n.definitions.push(a)})),n}(a,"mergeRequestSetAssignees")},kwYf:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"mrTimeTrackingReport"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"id"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"MergeRequestID"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[{kind:"Argument",name:{kind:"Name",value:"id"},value:{kind:"Variable",name:{kind:"Name",value:"id"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"timelogs"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"TimelogFragment"},directives:[]}]}}]}}]}}]}}],loc:{start:0,end:253}};a.loc.source={body:'#import "~/graphql_shared/fragments/issuable_timelogs.fragment.graphql"\n\nquery mrTimeTrackingReport($id: MergeRequestID!) {\n  issuable: mergeRequest(id: $id) {\n    id\n    title\n    timelogs {\n      nodes {\n        ...TimelogFragment\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("w9Yc").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.mrTimeTrackingReport=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"mrTimeTrackingReport")},lNxX:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"issueTimeTrackingReport"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"id"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"IssueID"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"id"},value:{kind:"Variable",name:{kind:"Name",value:"id"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"timelogs"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"TimelogFragment"},directives:[]}]}}]}}]}}]}}],loc:{start:0,end:242}};a.loc.source={body:'#import "~/graphql_shared/fragments/issuable_timelogs.fragment.graphql"\n\nquery issueTimeTrackingReport($id: IssueID!) {\n  issuable: issue(id: $id) {\n    id\n    title\n    timelogs {\n      nodes {\n        ...TimelogFragment\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("w9Yc").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.issueTimeTrackingReport=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"issueTimeTrackingReport")},lUSz:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"mergeRequestSetMilestone"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"attributeId"}},type:{kind:"NamedType",name:{kind:"Name",value:"MilestoneID"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuableSetAttribute"},name:{kind:"Name",value:"mergeRequestSetMilestone"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"projectPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}},{kind:"ObjectField",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}},{kind:"ObjectField",name:{kind:"Name",value:"milestoneId"},value:{kind:"Variable",name:{kind:"Name",value:"attributeId"}}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"attribute"},name:{kind:"Name",value:"milestone"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"state"},arguments:[],directives:[]}]}}]}}]}}]}}],loc:{start:0,end:363}};n.loc.source={body:"mutation mergeRequestSetMilestone($fullPath: ID!, $iid: String!, $attributeId: MilestoneID) {\n  issuableSetAttribute: mergeRequestSetMilestone(\n    input: { projectPath: $fullPath, iid: $iid, milestoneId: $attributeId }\n  ) {\n    errors\n    issuable: mergeRequest {\n      id\n      attribute: milestone {\n        title\n        id\n        state\n      }\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.mergeRequestSetMilestone=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"mergeRequestSetMilestone")},mawF:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"mergeRequestSubscribed"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"subscribed"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:191}};n.loc.source={body:"query mergeRequestSubscribed($fullPath: ID!, $iid: String!) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: mergeRequest(iid: $iid) {\n      id\n      subscribed\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.mergeRequestSubscribed=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"mergeRequestSubscribed")},mfli:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"projectLabels"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"searchTerm"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"labels"},arguments:[{kind:"Argument",name:{kind:"Name",value:"searchTerm"},value:{kind:"Variable",name:{kind:"Name",value:"searchTerm"}}},{kind:"Argument",name:{kind:"Name",value:"includeAncestorGroups"},value:{kind:"BooleanValue",value:!0}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"Label"},directives:[]}]}}]}}]}}]}}],loc:{start:0,end:289}};a.loc.source={body:'#import "~/graphql_shared/fragments/label.fragment.graphql"\n\nquery projectLabels($fullPath: ID!, $searchTerm: String) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    labels(searchTerm: $searchTerm, includeAncestorGroups: true) {\n      nodes {\n        ...Label\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("NwwH").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.projectLabels=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"projectLabels")},mxyH:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"mergeRequestTimeTracking"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"MergeRequestTimeTrackingFragment"},directives:[]},{kind:"Field",name:{kind:"Name",value:"humanTimeEstimate"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"timeEstimate"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:335}};a.loc.source={body:'#import "~/graphql_shared/fragments/merge_request_time_tracking.fragment.graphql"\n\nquery mergeRequestTimeTracking($fullPath: ID!, $iid: String!) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: mergeRequest(iid: $iid) {\n      ...MergeRequestTimeTrackingFragment\n      humanTimeEstimate\n      timeEstimate\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("J8uK").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.mergeRequestTimeTracking=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"mergeRequestTimeTracking")},nQ35:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"alertSetAssignees"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assigneeUsernames"}},type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuableSetAssignees"},name:{kind:"Name",value:"alertSetAssignees"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}},{kind:"ObjectField",name:{kind:"Name",value:"assigneeUsernames"},value:{kind:"Variable",name:{kind:"Name",value:"assigneeUsernames"}}},{kind:"ObjectField",name:{kind:"Name",value:"projectPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"alert"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"iid"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assignees"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"UserAvailability"},directives:[]}]}}]}},{kind:"Field",name:{kind:"Name",value:"notes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"AlertNote"},directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:661}};a.loc.source={body:'#import "~/graphql_shared/fragments/alert_note.fragment.graphql"\n#import "~/graphql_shared/fragments/user.fragment.graphql"\n#import "~/graphql_shared/fragments/user_availability.fragment.graphql"\n\nmutation alertSetAssignees($fullPath: ID!, $assigneeUsernames: [String!]!, $iid: String!) {\n  issuableSetAssignees: alertSetAssignees(\n    input: { iid: $iid, assigneeUsernames: $assigneeUsernames, projectPath: $fullPath }\n  ) {\n    errors\n    issuable: alert {\n      id\n      iid\n      assignees {\n        nodes {\n          ...User\n          ...UserAvailability\n        }\n      }\n      notes {\n        nodes {\n          ...AlertNote\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};function d(e){return e.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)}))}a.definitions=a.definitions.concat(d(n("1XfR").definitions)),a.definitions=a.definitions.concat(d(n("yXJ/").definitions)),a.definitions=a.definitions.concat(d(n("ND1Y").definitions));var r={};function l(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),r[e.name.value]=i}})),e.exports=a,e.exports.alertSetAssignees=function(e,i){var n={kind:e.kind,definitions:[l(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=r[i]||new Set,t=new Set,d=new Set;for(a.forEach((function(e){d.add(e)}));d.size>0;){var s=d;d=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(r[e]||new Set).forEach((function(e){d.add(e)})))}))}return t.forEach((function(i){var a=l(e,i);a&&n.definitions.push(a)})),n}(a,"alertSetAssignees")},pKR4:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"mergeRequestReference"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"reference"},arguments:[{kind:"Argument",name:{kind:"Name",value:"full"},value:{kind:"BooleanValue",value:!0}}],directives:[]}]}}]}}]}}],loc:{start:0,end:201}};n.loc.source={body:"query mergeRequestReference($fullPath: ID!, $iid: String!) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: mergeRequest(iid: $iid) {\n      id\n      reference(full: true)\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.mergeRequestReference=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"mergeRequestReference")},paIi:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"issueReference"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"reference"},arguments:[{kind:"Argument",name:{kind:"Name",value:"full"},value:{kind:"BooleanValue",value:!0}}],directives:[]}]}}]}}]}}],loc:{start:0,end:186}};n.loc.source={body:"query issueReference($fullPath: ID!, $iid: String) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: issue(iid: $iid) {\n      id\n      reference(full: true)\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.issueReference=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"issueReference")},rGXj:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"updateEscalationStatus"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"projectPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"status"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"IssueEscalationStatus"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"issueSetEscalationStatus"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"projectPath"},value:{kind:"Variable",name:{kind:"Name",value:"projectPath"}}},{kind:"ObjectField",name:{kind:"Name",value:"status"},value:{kind:"Variable",name:{kind:"Name",value:"status"}}},{kind:"ObjectField",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"clientMutationId"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"issue"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"EscalationStatusFragment"},directives:[]}]}}]}}]}}],loc:{start:0,end:368}};a.loc.source={body:'#import "ee_else_ce/sidebar/queries/escalation_status.fragment.graphql"\n\nmutation updateEscalationStatus($projectPath: ID!, $status: IssueEscalationStatus!, $iid: String!) {\n  issueSetEscalationStatus(input: { projectPath: $projectPath, status: $status, iid: $iid }) {\n    errors\n    clientMutationId\n    issue {\n      id\n      ...EscalationStatusFragment\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("+EIG").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.updateEscalationStatus=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"updateEscalationStatus")},sg9S:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"updateEpicDueDate"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"UpdateEpicInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuableSetDate"},name:{kind:"Name",value:"updateEpic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"dueDateIsFixed"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"dueDateFixed"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"dueDateFromMilestones"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:223}};n.loc.source={body:"mutation updateEpicDueDate($input: UpdateEpicInput!) {\n  issuableSetDate: updateEpic(input: $input) {\n    issuable: epic {\n      id\n      dueDateIsFixed\n      dueDateFixed\n      dueDateFromMilestones\n    }\n    errors\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.updateEpicDueDate=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"updateEpicDueDate")},tB5k:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"epicParticipants"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"group"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"participants"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:286}};a.loc.source={body:'#import "~/graphql_shared/fragments/user.fragment.graphql"\n\nquery epicParticipants($fullPath: ID!, $iid: ID) {\n  workspace: group(fullPath: $fullPath) {\n    id\n    issuable: epic(iid: $iid) {\n      id\n      participants {\n        nodes {\n          ...User\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("yXJ/").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.epicParticipants=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"epicParticipants")},teMy:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"getMrAssignees"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"mergeRequest"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"author"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"UserAvailability"},directives:[]},{kind:"Field",name:{kind:"Name",value:"mergeRequestInteraction"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"canMerge"},arguments:[],directives:[]}]}}]}},{kind:"Field",name:{kind:"Name",value:"assignees"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"FragmentSpread",name:{kind:"Name",value:"UserAvailability"},directives:[]},{kind:"Field",name:{kind:"Name",value:"mergeRequestInteraction"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"canMerge"},arguments:[],directives:[]}]}}]}}]}},{kind:"Field",name:{kind:"Name",value:"userPermissions"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"canMerge"},arguments:[],directives:[]}]}}]}}]}}]}}],loc:{start:0,end:646}};a.loc.source={body:'#import "~/graphql_shared/fragments/user.fragment.graphql"\n#import "~/graphql_shared/fragments/user_availability.fragment.graphql"\n\nquery getMrAssignees($fullPath: ID!, $iid: String!) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: mergeRequest(iid: $iid) {\n      id\n      author {\n        ...User\n        ...UserAvailability\n        mergeRequestInteraction {\n          canMerge\n        }\n      }\n      assignees {\n        nodes {\n          ...User\n          ...UserAvailability\n          mergeRequestInteraction {\n            canMerge\n          }\n        }\n      }\n      userPermissions {\n        canMerge\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};function d(e){return e.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)}))}a.definitions=a.definitions.concat(d(n("yXJ/").definitions)),a.definitions=a.definitions.concat(d(n("ND1Y").definitions));var r={};function l(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),r[e.name.value]=i}})),e.exports=a,e.exports.getMrAssignees=function(e,i){var n={kind:e.kind,definitions:[l(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=r[i]||new Set,t=new Set,d=new Set;for(a.forEach((function(e){d.add(e)}));d.size>0;){var s=d;d=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(r[e]||new Set).forEach((function(e){d.add(e)})))}))}return t.forEach((function(i){var a=l(e,i);a&&n.definitions.push(a)})),n}(a,"getMrAssignees")},uYUK:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"issueLabels"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"types"}},type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"IssueType"}}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}},{kind:"Argument",name:{kind:"Name",value:"types"},value:{kind:"Variable",name:{kind:"Name",value:"types"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"labels"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"Label"},directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:321}};a.loc.source={body:'#import "~/graphql_shared/fragments/label.fragment.graphql"\n\nquery issueLabels($fullPath: ID!, $iid: String, $types: [IssueType!]) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    issuable: issue(iid: $iid, types: $types) {\n      id\n      labels {\n        nodes {\n          ...Label\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("NwwH").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.issueLabels=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"issueLabels")},vBMq:function(e,i){var n={kind:"Document",definitions:[{kind:"FragmentDefinition",name:{kind:"Name",value:"EscalationPolicyFragment"},typeCondition:{kind:"NamedType",name:{kind:"Name",value:"EscalationPolicyType"}},directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"title"},name:{kind:"Name",value:"name"},arguments:[],directives:[]}]}}],loc:{start:0,end:81}};n.loc.source={body:"fragment EscalationPolicyFragment on EscalationPolicyType {\n  id\n  title: name\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.EscalationPolicyFragment=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"EscalationPolicyFragment")},w9Yc:function(e,i){var n={kind:"Document",definitions:[{kind:"FragmentDefinition",name:{kind:"Name",value:"TimelogFragment"},typeCondition:{kind:"NamedType",name:{kind:"Name",value:"Timelog"}},directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"__typename"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"timeSpent"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"user"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"spentAt"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"note"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"body"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"summary"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"userPermissions"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"adminTimelog"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:189}};n.loc.source={body:"fragment TimelogFragment on Timelog {\n  __typename\n  id\n  timeSpent\n  user {\n    id\n    name\n  }\n  spentAt\n  note {\n    id\n    body\n  }\n  summary\n  userPermissions {\n    adminTimelog\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.TimelogFragment=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"TimelogFragment")},wMWn:function(e,i,n){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"subscription",name:{kind:"Name",value:"issuableAssigneesUpdated"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"issuableId"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"IssuableID"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"issuableAssigneesUpdated"},arguments:[{kind:"Argument",name:{kind:"Name",value:"issuableId"},value:{kind:"Variable",name:{kind:"Name",value:"issuableId"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"InlineFragment",typeCondition:{kind:"NamedType",name:{kind:"Name",value:"Issue"}},directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assignees"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]},{kind:"Field",name:{kind:"Name",value:"status"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"availability"},arguments:[],directives:[]}]}}]}}]}}]}}]}}]}}],loc:{start:0,end:346}};a.loc.source={body:'#import "~/graphql_shared/fragments/user.fragment.graphql"\n\nsubscription issuableAssigneesUpdated($issuableId: IssuableID!) {\n  issuableAssigneesUpdated(issuableId: $issuableId) {\n    ... on Issue {\n      id\n      assignees {\n        nodes {\n          ...User\n          status {\n            availability\n          }\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(n("yXJ/").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var i=e.name.value;return!t[i]&&(t[i]=!0,!0)})));var d={};function r(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}a.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),d[e.name.value]=i}})),e.exports=a,e.exports.issuableAssigneesUpdated=function(e,i){var n={kind:e.kind,definitions:[r(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var a=d[i]||new Set,t=new Set,l=new Set;for(a.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){l.add(e)})))}))}return t.forEach((function(i){var a=r(e,i);a&&n.definitions.push(a)})),n}(a,"issuableAssigneesUpdated")},wSUX:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"epicReference"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"group"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"reference"},arguments:[{kind:"Argument",name:{kind:"Name",value:"full"},value:{kind:"BooleanValue",value:!0}}],directives:[]}]}}]}}]}}],loc:{start:0,end:178}};n.loc.source={body:"query epicReference($fullPath: ID!, $iid: ID) {\n  workspace: group(fullPath: $fullPath) {\n    id\n    issuable: epic(iid: $iid) {\n      id\n      reference(full: true)\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.epicReference=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"epicReference")},y9w6:function(e,i){var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"projectIssueMilestoneMutation"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"attributeId"}},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuableSetAttribute"},name:{kind:"Name",value:"updateIssue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"projectPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}},{kind:"ObjectField",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}},{kind:"ObjectField",name:{kind:"Name",value:"milestoneId"},value:{kind:"Variable",name:{kind:"Name",value:"attributeId"}}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"attribute"},name:{kind:"Name",value:"milestone"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"state"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"expired"},arguments:[],directives:[]}]}}]}}]}}]}}],loc:{start:0,end:355}};n.loc.source={body:"mutation projectIssueMilestoneMutation($fullPath: ID!, $iid: String!, $attributeId: ID) {\n  issuableSetAttribute: updateIssue(\n    input: { projectPath: $fullPath, iid: $iid, milestoneId: $attributeId }\n  ) {\n    errors\n    issuable: issue {\n      id\n      attribute: milestone {\n        title\n        id\n        state\n        expired\n      }\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,i){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==i)return a}}n.definitions.forEach((function(e){if(e.name){var i=new Set;!function e(i,n){if("FragmentSpread"===i.kind)n.add(i.name.value);else if("VariableDefinition"===i.kind){var a=i.type;"NamedType"===a.kind&&n.add(a.name.value)}i.selectionSet&&i.selectionSet.selections.forEach((function(i){e(i,n)})),i.variableDefinitions&&i.variableDefinitions.forEach((function(i){e(i,n)})),i.definitions&&i.definitions.forEach((function(i){e(i,n)}))}(e,i),a[e.name.value]=i}})),e.exports=n,e.exports.projectIssueMilestoneMutation=function(e,i){var n={kind:e.kind,definitions:[t(e,i)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var d=a[i]||new Set,r=new Set,l=new Set;for(d.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(i){var a=t(e,i);a&&n.definitions.push(a)})),n}(n,"projectIssueMilestoneMutation")}}]);
//# sourceMappingURL=13.94fa73fa.chunk.js.map